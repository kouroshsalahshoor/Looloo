@page "/search"
@attribute [StreamRendering]

@inject CoopService _coopService
@inject IcaService _icaService
@inject WillysService _willysService
@inject HemkopService _hemkopService
@inject MathemService _mathemService

<PageTitle>@_title</PageTitle>
<h5 class="bg-primary text-white text-center p-2">@_title</h5>

<div class="input-group mb-3">
    <input type="text" class="form-control" placeholder="Search" aria-label="Recipient's username" aria-describedby="button-addon2"
           @bind-value="_searchTerm" @bind-value:event="oninput">
    <button class="btn btn-warning text-light" type="button" id="button-addon2" @onclick="search" disabled="@(string.IsNullOrEmpty(_searchTerm) || _loading)">
        <i class="bi bi-search"></i>
        @if (_loading)
        {
            <div class="spinner-border text-primary spinner-border-sm" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        }
        Search
    </button>
</div>

<div class="album py-1 bg-body-tertiary">
    <div class="container-fluid">

        <div class="row row-cols-2 row-cols-sm-3 row-cols-md-6 g-3">
            @foreach (var item in _items)
            {
                <div class="col">
                    <div class="card shadow-sm">
                        <img src="@item.ImageUrl" class="img-thumbnail" height="100">
                        <div class="card-body">
                            <p class="card-text text-center">@item.Title</p>
                            <p class="card-text text-center fw-bold">@item.Price</p>
                            <p class="card-text text-center text-body-secondary">@item.SizePrice @item.Size</p>
                            <div class="d-flex justify-content-between align-items-center">
                                <div class="btn-group">
                                    @* <button type="button" class="btn btn-sm btn-outline-secondary">View</button> *@
                                </div>
                                <img src="images/companies/@(item.Company).png" class="img-thumbnail" width="70">
                                @* <small class="text-body-secondary">@item.Company</small> *@
                            </div>
                        </div>
                    </div>
                </div>
            }

        </div>
    </div>
</div>

@code {
    private string _title = "Search";
    private string? _searchTerm = "ägg";
    // private string? _searchTerm = string.Empty;
    private bool _loading = false;
    private List<ProductModel> _items = new();

    protected override async Task OnInitializedAsync()
    {
        // var categories = await _icaService.GetCategories();
    }

    private async Task search()
    {
        _loading = true;

        if (string.IsNullOrEmpty(_searchTerm) == false)
        {
            _items.Clear();

            await Task.Run(async () =>
            {
                var products = await _icaService.Search(_searchTerm);
                _items = products.ToList();
                await InvokeAsync(StateHasChanged);
            });

            await Task.Run(async () =>
            {
                var products = await _coopService.Search(_searchTerm);
                _items = _items.Concat(products).ToList();
                await InvokeAsync(StateHasChanged);
            });

            await Task.Run(async () =>
            {
                var products = await _hemkopService.Search(_searchTerm);
                _items = _items.Concat(products).ToList();
                await InvokeAsync(StateHasChanged);
            });

            await Task.Run(async () =>
            {
                var products = await _mathemService.Search(_searchTerm);
                _items = _items.Concat(products).ToList();
                await InvokeAsync(StateHasChanged);
            });

            await Task.Run(async () =>
            {
                var products = await _willysService.Search(_searchTerm);
                _items = _items.Concat(products).ToList();
                _loading = false;
                await InvokeAsync(StateHasChanged);
            });
        }
    }
}