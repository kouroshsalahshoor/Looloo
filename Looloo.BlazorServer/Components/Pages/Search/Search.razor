@page "/search"
@attribute [StreamRendering]

@inject CoopService _coopService
@inject IcaService _icaService
@inject WillysService _willysService
@inject HemkopService _hemkopService
@inject MathemService _mathemService
@inject CityGrossService _cityGrossService

<PageTitle>@_title</PageTitle>
<h5 class="bg-primary text-white text-center p-2">@_title</h5>

<div class="input-group mb-3">
    <input type="text" class="form-control" placeholder="Search" aria-label="Recipient's username" aria-describedby="button-addon2"
           @bind-value="_searchTerm" @bind-value:event="oninput"
           @onkeydown="@enter">
    <button class="btn btn-warning text-light" type="button" id="button-addon2" @onclick="search" disabled="@(string.IsNullOrEmpty(_searchTerm) || _loading)">
        <i class="bi bi-search"></i>
        @if (_loading)
        {
            <div class="spinner-border text-primary spinner-border-sm" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        }
        Search
    </button>
</div>

<_Album Items="_items" />

@code {
    private string _title = "Search";
    private string? _searchTerm = "ägg";
    // private string? _searchTerm = string.Empty;
    private bool _loading = false;
    private List<ProductModel> _items = new();

    protected override async Task OnInitializedAsync()
    {
        // var categories = await _icaService.GetCategories();
    }

    private async Task search()
    {
        _loading = true;

        if (string.IsNullOrEmpty(_searchTerm) == false)
        {
            _items.Clear();

            await Task.Run(async () =>
            {
                var products = await _icaService.Search(_searchTerm);
                _items = products.ToList();
                await InvokeAsync(StateHasChanged);
            });

            await Task.Run(async () =>
            {
                var products = await _coopService.Search(_searchTerm);
                _items = _items.Concat(products).ToList();
                await InvokeAsync(StateHasChanged);
            });

            await Task.Run(async () =>
            {
                var products = await _hemkopService.Search(_searchTerm);
                _items = _items.Concat(products).ToList();
                await InvokeAsync(StateHasChanged);
            });

            await Task.Run(async () =>
            {
                var products = await _mathemService.Search(_searchTerm);
                _items = _items.Concat(products).ToList();
                await InvokeAsync(StateHasChanged);
            });

            await Task.Run(async () =>
            {
                var products = await _cityGrossService.Search(_searchTerm);
                _items = _items.Concat(products).ToList();
                await InvokeAsync(StateHasChanged);
            });

            await Task.Run(async () =>
            {
                var products = await _willysService.Search(_searchTerm);
                _items = _items.Concat(products).ToList();
                _loading = false;
                await InvokeAsync(StateHasChanged);
            });
        }
    }

    private async Task enter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            await search();
        }
    }
}